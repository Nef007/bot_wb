import { InlineKeyboard } from 'grammy';
import subscriptionModel from '../db/models/subscription.js';
import orderModel from '../db/models/order.js';
import { YooMoneyService } from '../services/yoomoneyService.js';
import { paymentController } from './paymentController.js';
import dayjs from 'dayjs';

const yoomoneyService = new YooMoneyService();

export const subscriptionController = {
    showOrderDetail: async (ctx, orderNumber) => {
        try {
            const order = await orderModel.findByOrderNumber(orderNumber);

            if (!order) {
                await ctx.answerCallbackQuery({ text: '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            const paymentStatus = await paymentController.checkOrderPaymentStatus(orderNumber);

            const message = subscriptionController.formatOrderDetail(order, paymentStatus);
            const keyboard = subscriptionController.createOrderDetailKeyboard(order, paymentStatus);

            await ctx.editMessageText(message, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
            await ctx.answerCallbackQuery();
        } catch (error) {
            console.error('Error showing order detail:', error);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞' });
        }
    },

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    createOrderDetailKeyboard: (order, paymentStatus) => {
        const keyboard = new InlineKeyboard();
        const isTrial = order.planType === 'TRIAL';
        const isPaid = paymentStatus.status === 'PAID' || order.status === 'PAID';
        const isPending = paymentStatus.status === 'PENDING' || order.status === 'PENDING';

        // –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if (isTrial) {
            keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'order_history');
            return keyboard;
        }

        // –î–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if (isPaid) {
            keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'order_history');
            return keyboard;
        }

        // –î–ª—è –æ–∂–∏–¥–∞—é—â–µ–≥–æ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
        if (isPending) {
            // –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å paymentUrl)
            if (order.paymentUrl) {
                keyboard.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', order.paymentUrl).row();
            }

            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            keyboard.text('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', `check_payment:${order.orderNumber}`).row();

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            keyboard.text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', `delete_order:${order.orderNumber}`).row();
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'order_history');

        return keyboard;
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    checkPaymentStatus: async (ctx, orderNumber) => {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            await ctx.answerCallbackQuery({ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...' });

            const paymentStatus = await paymentController.checkOrderPaymentStatus(orderNumber);
            const order = await orderModel.findByOrderNumber(orderNumber);

            let message = '';
            let showAlert = false;

            switch (paymentStatus.status) {
                case 'PAID':
                    message = '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.';
                    showAlert = true;
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
                    await subscriptionController.showOrderDetail(ctx, orderNumber);
                    break;

                case 'PENDING':
                    message = '‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.';
                    showAlert = true;
                    break;

                case 'EXPIRED':
                    message = 'üíÄ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.';
                    showAlert = true;
                    await subscriptionController.showOrderDetail(ctx, orderNumber);
                    break;

                case 'ERROR':
                    message = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    showAlert = true;
                    break;

                default:
                    message = '‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.';
                    showAlert = true;
            }

            if (showAlert) {
                await ctx.answerCallbackQuery({ text: message, show_alert: true });
            }
        } catch (error) {
            console.error('Error checking payment status:', error);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞' });
        }
    },

    deleteOrder: async (ctx, orderNumber) => {
        try {
            const order = await orderModel.findByOrderNumber(orderNumber);

            if (!order) {
                await ctx.answerCallbackQuery({ text: '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                return;
            }

            // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            if (order.planType === 'TRIAL') {
                await ctx.answerCallbackQuery({ text: '‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' });
                return;
            }

            await orderModel.deleteByOrderNumber(orderNumber);

            await ctx.answerCallbackQuery({ text: '‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω' });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            await subscriptionController.showOrderHistory(ctx);
        } catch (error) {
            console.error('Error deleting order:', error);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞' });
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ formatOrderDetail —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    formatOrderDetail: (order, paymentStatus = null) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã
        const currentStatus = paymentStatus?.status || order.status;

        const statusTexts = {
            PENDING: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            PAID: '‚úÖ –û–ø–ª–∞—á–µ–Ω',
            CANCELLED: '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            EXPIRED: 'üíÄ –ò—Å—Ç–µ–∫',
        };

        const statusText = statusTexts[currentStatus] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';

        const planNames = {
            TRIAL: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
            MONTHLY: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
            QUARTERLY: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
        };

        const isTrial = order.planType === 'TRIAL';
        const isPaid = currentStatus === 'PAID';

        let message = `üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ${order.orderNumber}</b>\n\n`;
        message += `üí∞ <b>–¢–∞—Ä–∏—Ñ:</b> ${planNames[order.planType] || order.planType}\n`;
        message += `üí≥ <b>–°—É–º–º–∞:</b> ${order.amount || 0} —Ä—É–±.\n`;
        message += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${isTrial ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : statusText}\n`;
        message += `üïê <b>–°–æ–∑–¥–∞–Ω:</b> ${dayjs(order.createdAt).format('DD.MM.YYYY HH:mm:ss')}\n`;
        message += `üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> ${dayjs(order.updatedAt).format('DD.MM.YYYY HH:mm:ss')}\n`;


          subscription.last_scan_at
        ? dayjs(subscription.last_scan_at).tz('Europe/Moscow').format('DD.MM.YYYY HH:mm')
        : '–ï—â–µ –Ω–µ –±—ã–ª–æ'
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        if (paymentStatus && paymentStatus.timestamp) {
            message += `üîç <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> ${dayjs(paymentStatus.timestamp).format(
                'DD.MM.YYYY HH:mm:ss'
            )}\n`;
        }

        if (isTrial) {
            message += `\nüéÅ <i>–≠—Ç–æ –≤–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞!</i>`;
        } else if (isPaid) {
            message += `\n‚úÖ <i>–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</i>`;
        } else if (currentStatus === 'PENDING') {
            message += `\nüí° <i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏</i>`;
        } else if (currentStatus === 'EXPIRED') {
            message += `\n‚ùå <i>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.</i>`;
        }

        return message.trim();
    },

    showSubscriptionStatus: async (ctx) => {
        try {
            const userId = String(ctx.from.id);
            const subscription = subscriptionModel.findByUserId(userId);
            const hasActiveSubscription = subscriptionModel.isSubscriptionActive(userId);
            const remainingDays = subscriptionModel.getRemainingDays(userId);

            let message = 'üìÖ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n';

            if (hasActiveSubscription) {
                const endDate = dayjs(subscription.endDate).format('DD.MM.YYYY');
                message += `‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n`;
                message += `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${remainingDays}\n`;
                message += `–ò—Å—Ç–µ–∫–∞–µ—Ç: ${endDate}\n`;
                message += `–¢–∞—Ä–∏—Ñ: ${subscriptionController.getPlanName(subscription.planType)}\n`;
            } else {
                const endDate = subscription ? dayjs(subscription.endDate).format('DD.MM.YYYY') : '';
                message += `‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ${endDate}</b> ‚òπÔ∏è\n`;
                message += `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ üòâ\n`;
            }

            const keyboard = new InlineKeyboard()
                .text('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'renew_subscription')
                .row()
                .text('üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', 'order_history')
                .row()
                .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'entities');

            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ callbackQuery
            if (ctx.callbackQuery) {
                await ctx.editMessageText(message, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                await ctx.answerCallbackQuery();
            } else {
                // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ callback)
                await ctx.reply(message, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
                // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º answerCallbackQuery –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            }
        } catch (error) {
            console.error('Error showing subscription status:', error);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            if (ctx.callbackQuery) {
                await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏' });
            } else {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
            }
        }
    },

    showPlanSelection: async (ctx) => {
        try {
            const userId = String(ctx.from.id);
            const hasPreviousOrders = await subscriptionController.userHasPreviousOrders(userId);

            const message = `üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n`;

            const keyboard = new InlineKeyboard();

            if (!hasPreviousOrders) {
                keyboard.text('üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (2 –Ω–µ–¥–µ–ª–∏)', 'select_plan:TRIAL').row();
            }

            keyboard
                .text('üìÖ 1 –º–µ—Å—è—Ü (90 —Ä—É–±.)', 'select_plan:MONTHLY')
                .row()
                .text('üìä 3 –º–µ—Å—è—Ü–∞ (250 —Ä—É–±.)', 'select_plan:QUARTERLY')
                .row()
                .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'subscription_status');

            await ctx.editMessageText(message, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
            await ctx.answerCallbackQuery();
        } catch (error) {
            console.error('Error showing plan selection:', error);
        }
    },

    createOrder: async (ctx, planType) => {
        try {
            const userId = String(ctx.from.id);
            const planInfo = yoomoneyService.getPlanInfo(planType);

            const order = await yoomoneyService.createOrder(userId, planType, planInfo.amount, planInfo.duration);

            const message = subscriptionController.formatOrderMessage(order, planInfo);
            const keyboard = subscriptionController.createOrderDetailKeyboard(order, { status: 'PENDING' });

            await ctx.editMessageText(message, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
            await ctx.answerCallbackQuery();
        } catch (error) {
            console.error('Error creating order:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    },

    showOrderHistory: async (ctx) => {
        try {
            const userId = String(ctx.from.id);
            const orders = await orderModel.findByUserId(userId, 10);

            let message = `üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n`;
            message += `üïê –ó–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ "–æ–∂–∏–¥–∞–µ—Ç" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è\n\n`;

            const keyboard = new InlineKeyboard();

            if (orders.length === 0) {
                message += 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤';
            } else {
                orders.forEach((order) => {
                    const emoji = subscriptionController.getStatusEmoji(order.status);
                    const date = dayjs(order.createdAt).format('DD.MM.YYYY');
                    const amount = order.amount > 0 ? `${order.amount} —Ä—É–±.` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
                    const shortOrderNumber = order.orderNumber.slice(-6);

                    keyboard
                        .text(`${emoji} ${shortOrderNumber} - ${amount}`, `order_detail:${order.orderNumber}`)
                        .row();
                });
            }

            keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏', 'subscription_status');

            if (ctx.callbackQuery) {
                await ctx.editMessageText(message, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
                await ctx.answerCallbackQuery();
            } else {
                await ctx.reply(message, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }
        } catch (error) {
            console.error('Error showing order history:', error);

            if (ctx.callbackQuery) {
                await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏' });
            } else {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
            }
        }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getPlanName: (planType) => {
        const names = {
            TRIAL: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
            MONTHLY: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
            QUARTERLY: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
        };
        return names[planType] || planType;
    },

    getStatusEmoji: (status) => {
        const emojis = {
            PENDING: '‚è≥',
            PAID: '‚úÖ',
            CANCELLED: '‚ùå',
            EXPIRED: 'üíÄ',
        };
        return emojis[status] || '‚ùì';
    },

    formatOrderMessage: (order, planInfo) => {
        const isTrial = order.planType === 'TRIAL';
        const isPaid = order.status === 'PAID';

        const statusInfo = {
            TRIAL: { emoji: '‚úÖ', text: '–ê–∫—Ç–∏–≤–µ–Ω', description: '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' },
            PENDING: { emoji: '‚è≥', text: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', description: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã' },
            PAID: { emoji: '‚úÖ', text: '–û–ø–ª–∞—á–µ–Ω', description: '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' },
        };

        const currentStatus = isTrial ? statusInfo.TRIAL : isPaid ? statusInfo.PAID : statusInfo.PENDING;

        const planNames = {
            TRIAL: 'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (14 –¥–Ω–µ–π)',
            MONTHLY: 'üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π)',
            QUARTERLY: 'üìä –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (90 –¥–Ω–µ–π)',
        };

        let message = `üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n`;
        message += `üìÑ <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> ${order.orderNumber}\n`;
        message += `üí∞ <b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> ${planNames[order.planType] || order.planType}\n`;
        message += `üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${order.amount || 0} —Ä—É–±.\n`;
        message += `${currentStatus.emoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${currentStatus.text}\n`;
        message += `üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${dayjs().format('DD.MM.YYYY HH:mm:ss')} –ú–°–ö\n`;

        if (!isTrial) {
            message += `üí≥ <b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b> –ÆMoney\n`;
        }

        message += `\n`;

        if (isTrial) {
            message += `üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n`;
            message += `–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üöÄ\n\n`;
            message += `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å:\n`;
            message += `‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n`;
            message += `‚Ä¢ 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n`;
            message += `‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n`;
            message += `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ‚ú®`;
        } else if (isPaid) {
            message += `‚úÖ <b>–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!</b>\n`;
            message += `–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞! üéâ`;
        } else {
            message += `üìã <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n`;
            message += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"\n`;
            message += `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ÆMoney\n`;
            message += `3. –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂\n`;
            message += `4. –ù–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n\n`;
            message += `‚è±Ô∏è <i>–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π</i>`;
        }

        return message;
    },

    userHasPreviousOrders: async (userId) => {
        const orders = await orderModel.findByUserId(userId, 1);
        return orders.length > 0;
    },
};
