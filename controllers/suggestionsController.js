import { InlineKeyboard } from 'grammy';

export const suggestionsController = {
    showSuggestionsInfo: async (ctx) => {
        try {
            // –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à—É Telegram –≥—Ä—É–ø–ø—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é)
            const GROUP_LINK = 'https://t.me/+ffLlMIryf_M0MmU6';
            // const GROUP_USERNAME = '@your_group_username'; // –∏–ª–∏ 't.me/your_group'

            const messageText = `üí° <b>–ò–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>

–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞? –•–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ?

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –≥–¥–µ –º–æ–∂–Ω–æ:
‚Ä¢ üöÄ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ üêõ –°–æ–æ–±—â–∞—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö  
‚Ä¢ üí¨ –û–±—Å—É–∂–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ üì¢ –ü–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏

<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b>
${GROUP_LINK}

–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–¥–µ–∏ –≤ –æ–±—â–∏–π —á–∞—Ç! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.`;

            const keyboard = new InlineKeyboard()
                .url('üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ', GROUP_LINK)
                .row()
                .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'entities');

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (callback query)
            if (ctx.callbackQuery) {
                await ctx.editMessageText(messageText, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
                await ctx.answerCallbackQuery();
            } else {
                // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
                await ctx.reply(messageText, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }
        } catch (error) {
            console.error('Error showing suggestions info:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    },

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–Ø –≤—Å—Ç—É–ø–∏–ª"
    showSuggestionsWithConfirmation: async (ctx) => {
        try {
            const GROUP_LINK = 'https://t.me/+ffLlMIryf_M0MmU6';

            const messageText = `üí° <b>–ò–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞:

${GROUP_LINK}

–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å—Ç—É–ø–∏—à—å –≤ –≥—Ä—É–ø–ø—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–Ø –≤—Å—Ç—É–ø–∏–ª(a)" –Ω–∏–∂–µ üëá`;

            const keyboard = new InlineKeyboard()
                .url('üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ', GROUP_LINK)
                .row()
                .text('‚úÖ –Ø –≤—Å—Ç—É–ø–∏–ª(a)', 'joined_group')
                .row()
                .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'entities');

            if (ctx.callbackQuery) {
                await ctx.editMessageText(messageText, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
                await ctx.answerCallbackQuery();
            } else {
                await ctx.reply(messageText, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }
        } catch (error) {
            console.error('Error showing suggestions with confirmation:', error);
        }
    },

    handleJoinedConfirmation: async (ctx) => {
        try {
            await ctx.answerCallbackQuery({
                text: '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –≤ –≥—Ä—É–ø–ø–µ üöÄ',
            });

            const messageText = `üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b>

–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –≤ –≥—Ä—É–ø–ø–µ
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—é–±—ã–µ –∏–¥–µ–∏ - –º—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!`;

            const keyboard = new InlineKeyboard()
                .text('üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é', 'suggest_idea')
                .text('üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É', 'go_to_group')
                .row()
                .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'entities');

            await ctx.editMessageText(messageText, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
        } catch (error) {
            console.error('Error handling joined confirmation:', error);
        }
    },
};
