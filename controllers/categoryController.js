import { InlineKeyboard } from 'grammy';
import { wbCategoryModel } from '../db/models/wbCategory.js';
import { userCategorySubscriptionModel } from '../db/models/userCategorySubscriptionModel.js';
import dayjs from 'dayjs';

export const categoryController = {
    showCategories: async (ctx, parentId = null, messageIdToEdit = null) => {
        try {
            const userId = String(ctx.from.id);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ
            const hasCategories = await wbCategoryModel.hasCategories();
            if (!hasCategories) {
                console.log('üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –≤ –±–∞–∑–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º...');
                await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å Wildberries...');
                await wbCategoryModel.safeSyncWithWB();
            }

            let categories;
            let menuHtml;
            let backButton = 'main_menu';

            if (parentId === null) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                categories = await wbCategoryModel.findByParentId(null);

                if (categories.length === 0) {
                    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    return;
                }

                menuHtml = `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`;
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories = await wbCategoryModel.findByParentId(parentId);
                const parentCategory = await wbCategoryModel.findById(parentId);

                if (!parentCategory) {
                    await ctx.reply('‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return;
                }

                menuHtml = `üìÇ <b>${parentCategory.full_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:`;
                backButton = parentCategory.parent_id ? `category_${parentCategory.parent_id}` : 'categories_menu';
            }

            const keyboard = new InlineKeyboard();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            for (const category of categories) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                const isSubscribed = await userCategorySubscriptionModel.isSubscribed(userId, category.id);

                let buttonText;
                let callbackData;

                if (category.has_children) {
                    // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                    buttonText = isSubscribed ? `‚úÖ üìÅ ${category.name}` : `üìÅ ${category.name}`;
                    callbackData = `category_${category.id}`;
                } else {
                    // –î–ª—è –∫–æ–Ω–µ—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    buttonText = isSubscribed ? `‚úÖ üì¶ ${category.name}` : `üì¶ ${category.name}`;
                    callbackData = isSubscribed ? `subscription_detail_${category.id}` : `subscribe_${category.id}`;
                }

                keyboard.text(buttonText, callbackData).row();
            }

            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backButton);

            let finalMessage;
            if (messageIdToEdit) {
                finalMessage = await ctx.editMessageText(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            } else {
                finalMessage = await ctx.reply(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }

            ctx.session.currentMenu = {
                type: 'categories',
                parentId: parentId,
                messageId: finalMessage.message_id,
            };

            console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${e.message || e}`);
        }
    },

    showCategoryDetail: async (ctx, categoryId, messageIdToEdit = null) => {
        try {
            const userId = String(ctx.from.id);
            const category = await wbCategoryModel.findById(categoryId);

            if (!category) {
                await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const isSubscribed = await userCategorySubscriptionModel.isSubscribed(userId, categoryId);

            let menuHtml;
            let currentThreshold = 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if (isSubscribed) {
                const subscription = await userCategorySubscriptionModel.findByUserAndCategory(userId, categoryId);
                currentThreshold = subscription.alert_threshold;
                menuHtml = `
üì¶ <b>${category.full_name}</b>

‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b>

üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${subscription.alert_threshold}%
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${subscription.scan_pages}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${subscription.scan_interval_minutes} –º–∏–Ω.
‚Ä¢ –ú–∞–∫—Å. —Ç–æ–≤–∞—Ä–æ–≤: ${subscription.max_products}

üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>
${subscription.last_scan_at ? dayjs(subscription.last_scan_at).format('DD.MM.YYYY HH:mm') : '–ï—â–µ –Ω–µ –±—ã–ª–æ'}
                `;
            } else {
                menuHtml = `
üì¶ <b>${category.full_name}</b>

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

üîç <b>–ß—Ç–æ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è

üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 5%
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 10
                `;
            }

            const keyboard = new InlineKeyboard();

            if (isSubscribed) {
                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞ –∏ –æ—Ç–ø–∏—Å–∫—É
                keyboard
                    .text(currentThreshold === 10 ? '‚úÖ 10%' : '10%', `set_threshold_${categoryId}_10`)
                    .text(currentThreshold === 20 ? '‚úÖ 20%' : '20%', `set_threshold_${categoryId}_20`)
                    .text(currentThreshold === 30 ? '‚úÖ 30%' : '30%', `set_threshold_${categoryId}_30`)
                    .text(currentThreshold === 40 ? '‚úÖ 40%' : '40%', `set_threshold_${categoryId}_40`)
                    .row()
                    .text(currentThreshold === 50 ? '‚úÖ 50%' : '50%', `set_threshold_${categoryId}_50`)
                    .text(currentThreshold === 60 ? '‚úÖ 60%' : '60%', `set_threshold_${categoryId}_60`)
                    .text(currentThreshold === 70 ? '‚úÖ 70%' : '70%', `set_threshold_${categoryId}_70`)
                    .text(currentThreshold === 80 ? '‚úÖ 80%' : '80%', `set_threshold_${categoryId}_80`)
                    .row()
                    .text('‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', `unsubscribe_${categoryId}`)
                    .row();
            } else {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                keyboard.text('‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `subscribe_category_${categoryId}`).row();
            }

            keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', category.parent_id ? `category_${category.parent_id}` : 'categories_menu');

            let finalMessage;
            if (messageIdToEdit) {
                finalMessage = await ctx.editMessageText(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            } else {
                finalMessage = await ctx.reply(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }

            ctx.session.currentMenu = {
                type: 'category_detail',
                categoryId: categoryId,
                messageId: finalMessage.message_id,
            };
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ï–¢–ê–õ–ï–ô –ö–ê–¢–ï–ì–û–†–ò–ò', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${e.message || e}`);
        }
    },

    subscribeToCategory: async (ctx, categoryId, messageIdToEdit = null) => {
        try {
            const userId = String(ctx.from.id);
            const category = await wbCategoryModel.findById(categoryId);

            if (!category) {
                await ctx.answerCallbackQuery({ text: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingSubscription = await userCategorySubscriptionModel.findByUserAndCategory(userId, categoryId);
            if (existingSubscription) {
                await ctx.answerCallbackQuery({ text: '‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                await categoryController.showCategoryDetail(ctx, categoryId, messageIdToEdit);
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const subscriptionId = await userCategorySubscriptionModel.create(userId, categoryId, {
                alertThreshold: 10,
                scanPages: 10,
                scanInterval: 10,
                maxProducts: 1000,
            });

            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${categoryId}`);

            await ctx.answerCallbackQuery({ text: '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!' });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ)
            await categoryController.showCategoryDetail(ctx, categoryId, messageIdToEdit);
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–¢–ï–ì–û–†–ò–Æ', e);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏' });
        }
    },

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
     */
    showSubscriptionDetail: async (ctx, categoryId, messageIdToEdit = null, fromMySubscriptions = false) => {
        try {
            const userId = String(ctx.from.id);
            const category = await wbCategoryModel.findById(categoryId);
            const subscription = await userCategorySubscriptionModel.findByUserAndCategory(userId, categoryId);

            if (!category) {
                await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const currentThreshold = subscription.alert_threshold;

            const menuHtml = `
üì¶ <b>${category.full_name}</b>

‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b>

üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${subscription.alert_threshold}%
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${subscription.scan_pages}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${subscription.scan_interval_minutes} –º–∏–Ω.
‚Ä¢ –ú–∞–∫—Å. —Ç–æ–≤–∞—Ä–æ–≤: ${subscription.max_products}

üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>
${subscription.last_scan_at ? dayjs(subscription.last_scan_at).format('DD.MM.YYYY HH:mm') : '–ï—â–µ –Ω–µ –±—ã–ª–æ'}
            `;

            const keyboard = new InlineKeyboard()
                .text(currentThreshold === 10 ? '‚úÖ 10%' : '10%', `set_threshold_${categoryId}_10`)
                .text(currentThreshold === 20 ? '‚úÖ 20%' : '20%', `set_threshold_${categoryId}_20`)
                .text(currentThreshold === 30 ? '‚úÖ 30%' : '30%', `set_threshold_${categoryId}_30`)
                .text(currentThreshold === 40 ? '‚úÖ 40%' : '40%', `set_threshold_${categoryId}_40`)
                .row()
                .text(currentThreshold === 50 ? '‚úÖ 50%' : '50%', `set_threshold_${categoryId}_50`)
                .text(currentThreshold === 60 ? '‚úÖ 60%' : '60%', `set_threshold_${categoryId}_60`)
                .text(currentThreshold === 70 ? '‚úÖ 70%' : '70%', `set_threshold_${categoryId}_70`)
                .text(currentThreshold === 80 ? '‚úÖ 80%' : '80%', `set_threshold_${categoryId}_80`)
                .row()
                .text('‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', `unsubscribe_${categoryId}`)
                .row();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            let backButton;
            if (fromMySubscriptions) {
                // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
                backButton = 'my_subscriptions';
            } else if (category.parent_id) {
                // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                backButton = `category_${category.parent_id}`;
            } else {
                // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                backButton = 'categories_menu';
            }

            keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', backButton);

            let finalMessage;
            if (messageIdToEdit) {
                finalMessage = await ctx.editMessageText(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            } else {
                finalMessage = await ctx.reply(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }

            ctx.session.currentMenu = {
                type: 'subscription_detail',
                categoryId: categoryId,
                messageId: finalMessage.message_id,
                fromMySubscriptions: fromMySubscriptions,
            };
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –î–ï–¢–ê–õ–ï–ô –ü–û–î–ü–ò–°–ö–ò', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${e.message || e}`);
        }
    },

    setThreshold: async (ctx, categoryId, threshold) => {
        try {
            const userId = String(ctx.from.id);
            const subscription = await userCategorySubscriptionModel.findByUserAndCategory(userId, categoryId);

            if (!subscription) {
                await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥
            await userCategorySubscriptionModel.updateThreshold(subscription.id, threshold);

            console.log(`‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ—Ä–æ–≥ ${threshold}% –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);

            await ctx.answerCallbackQuery({ text: `‚úÖ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${threshold}%` });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–æ–º
            const fromMySubscriptions = ctx.session.currentMenu?.fromMySubscriptions || false;

            if (fromMySubscriptions) {
                await categoryController.showSubscriptionDetail(
                    ctx,
                    categoryId,
                    ctx.callbackQuery.message.message_id,
                    true
                );
            } else {
                await categoryController.showCategoryDetail(ctx, categoryId, ctx.callbackQuery.message.message_id);
            }
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –ü–û–†–û–ì–ê', e);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞' });
        }
    },

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    showMySubscriptions: async (ctx, messageIdToEdit = null) => {
        try {
            const userId = String(ctx.from.id);
            const subscriptions = await userCategorySubscriptionModel.findByUserId(userId);

            if (subscriptions.length === 0) {
                const menuHtml = `
üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω.
            `;

                const keyboard = new InlineKeyboard()
                    .text('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'categories_menu')
                    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')
                    .row();

                let finalMessage;
                if (messageIdToEdit) {
                    finalMessage = await ctx.editMessageText(menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                    });
                } else {
                    finalMessage = await ctx.reply(menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                    });
                }

                ctx.session.currentMenu = {
                    type: 'my_subscriptions',
                    messageId: finalMessage.message_id,
                };
                return;
            }

            // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            if (subscriptions.length > 5) {
                await categoryController.showMySubscriptionsPage(ctx, 1, messageIdToEdit);
            } else {
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                const menuHtml = `
üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>${subscriptions.length}</b>

<b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>
${subscriptions
    .map(
        (sub, index) =>
            `${index + 1}. ${sub.full_name}\n   ‚öôÔ∏è –ü–æ—Ä–æ–≥: ${sub.alert_threshold}% | üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: ${sub.scan_pages}\n`
    )
    .join('\n')}
            `;

                const keyboard = new InlineKeyboard();

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                subscriptions.forEach((subscription) => {
                    keyboard
                        .text(
                            `üì¶ ${subscription.category_name}`,
                            `subscription_detail_from_my_${subscription.category_id}`
                        )
                        .row();
                });

                keyboard.text('üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'categories_menu').text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu').row();

                let finalMessage;
                if (messageIdToEdit) {
                    finalMessage = await ctx.editMessageText(menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                    });
                } else {
                    finalMessage = await ctx.reply(menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                    });
                }

                ctx.session.currentMenu = {
                    type: 'my_subscriptions',
                    messageId: finalMessage.message_id,
                    page: 1,
                };
            }
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –ú–û–ò–• –ü–û–î–ü–ò–°–û–ö', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: ${e.message || e}`);
        }
    },

    showMySubscriptionsPage: async (ctx, page = 1, messageIdToEdit = null) => {
        try {
            const userId = String(ctx.from.id);
            const subscriptions = await userCategorySubscriptionModel.findByUserId(userId);

            if (subscriptions.length === 0) {
                await categoryController.showMySubscriptions(ctx, messageIdToEdit);
                return;
            }

            const pageSize = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const totalPages = Math.ceil(subscriptions.length / pageSize);
            const startIndex = (page - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            const pageSubscriptions = subscriptions.slice(startIndex, endIndex);

            const menuHtml = `
üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}
–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>${subscriptions.length}</b>

<b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>
${pageSubscriptions
    .map(
        (sub, index) =>
            `${startIndex + index + 1}. ${sub.full_name}\n   ‚öôÔ∏è –ü–æ—Ä–æ–≥: ${sub.alert_threshold}% | üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: ${
                sub.scan_pages
            }\n`
    )
    .join('\n')}
        `;

            const keyboard = new InlineKeyboard();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pageSubscriptions.forEach((subscription) => {
                keyboard
                    .text(`üì¶ ${subscription.category_name}`, `subscription_detail_from_my_${subscription.category_id}`)
                    .row();
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            if (page > 1) {
                keyboard.text('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', `subscriptions_page_${page - 1}`).row();
            }

            if (page < totalPages) {
                if (page > 1) {
                    keyboard.text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ', `subscriptions_page_${page + 1}`).row();
                } else {
                    keyboard.text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ', `subscriptions_page_${page + 1}`).row();
                }
            }

            keyboard.text('üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'categories_menu').text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu').row();

            let finalMessage;
            if (messageIdToEdit) {
                finalMessage = await ctx.editMessageText(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            } else {
                finalMessage = await ctx.reply(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }

            ctx.session.currentMenu = {
                type: 'my_subscriptions',
                messageId: finalMessage.message_id,
                page: page,
            };
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –°–¢–†–ê–ù–ò–¶–´ –ü–û–î–ü–ò–°–û–ö', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: ${e.message || e}`);
        }
    },

    /**
     * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    unsubscribeFromCategory: async (ctx, categoryId) => {
        try {
            const userId = String(ctx.from.id);
            const subscription = await userCategorySubscriptionModel.findByUserAndCategory(userId, categoryId);

            if (!subscription) {
                await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                return;
            }

            // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
            await userCategorySubscriptionModel.deleteByUserAndCategory(userId, categoryId);

            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);

            await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
            await categoryController.showMySubscriptions(ctx, ctx.callbackQuery.message.message_id);
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –û–¢–ü–ò–°–ö–ò –û–¢ –ö–ê–¢–ï–ì–û–†–ò–ò', e);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ' });
        }
    },
};
