import { InlineKeyboard } from 'grammy';
import { adminService } from '../services/adminService.js';
import { userCategorySubscriptionModel } from '../db/models/userCategorySubscriptionModel.js';
import { userProductSubscriptionModel } from '../db/models/userProductSubscriptionModel.js';

export const menuController = {
    getMenu: async (ctx, messageIdToEdit = null) => {
        try {
            ctx.session = ctx.session || {};
            const userId = String(ctx.from.id);

            const categorySubscriptionCount = await userCategorySubscriptionModel.getCountByUserId(userId);
            const productSubscriptionCount = await userProductSubscriptionModel.getCountByUserId(userId);

            const menuHtml = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>${categorySubscriptionCount}</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: <b>${productSubscriptionCount}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        `;

            const keyboard = new InlineKeyboard([
                [InlineKeyboard.text('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'categories_menu')],
                [
                    InlineKeyboard.text(
                        `üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (${categorySubscriptionCount + productSubscriptionCount})`,
                        'my_subscriptions'
                    ),
                ],
                [InlineKeyboard.text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'add_product')],
                [InlineKeyboard.text('üí° –ò–¥–µ–∏/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', 'suggestions')],
                [InlineKeyboard.text('üí∞ –ü–æ–¥–ø–∏—Å–∫–∞', 'subscription_status')],
            ]);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (adminService.isAdmin(userId)) {
                keyboard.row().text('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'admin_menu');
            }

            let finalMessage;
            if (messageIdToEdit) {
                try {
                    finalMessage = await ctx.api.editMessageText(ctx.chat.id, messageIdToEdit, menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                    });
                } catch (e) {
                    if (e.description && e.description.includes('message is not modified')) {
                        console.log('Message not modified, skipping edit in getMenu.');
                        finalMessage = { message_id: messageIdToEdit };
                    } else {
                        throw e;
                    }
                }
            } else {
                finalMessage = await ctx.reply(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
            }

            ctx.session.currentGroup = { id: null, name: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', messageId: finalMessage.message_id };
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ú–ï–ù–Æ', e);
            await ctx.reply(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é: ${e.message || e}`);
        }
    },
};
