import { InlineKeyboard } from 'grammy';
import { adminService } from '../services/adminService.js';
import userModel from '../db/models/user.js';
import subscriptionModel from '../db/models/subscription.js';
import orderModel from '../db/models/order.js';
import dayjs from 'dayjs';

export const adminController = {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    showAdminMenu: async (ctx) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        const message = `‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

        const keyboard = new InlineKeyboard()
            .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin_users')
            .row()
            .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', 'admin_stats')
            .row()
            .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'entities');

        if (ctx.callbackQuery) {
            await ctx.editMessageText(message, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
            await ctx.answerCallbackQuery();
        } else {
            await ctx.reply(message, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
        }
    },

    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    showUsersList: async (ctx, page = 0) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        const users = await adminService.getAllUsers();
        const pageSize = 10;
        const startIndex = page * pageSize;
        const paginatedUsers = users.slice(startIndex, startIndex + pageSize);

        let message = `üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n`;
        message += `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n\n`;

        const keyboard = new InlineKeyboard();

        paginatedUsers.forEach((user) => {
            const statusEmoji = user.status === 'ACTIVE' ? '‚úÖ' : '‚ùå';
            const roleEmoji = user.role === 'ADMIN' ? 'üëë' : 'üë§';
            const subStatus = user.subscription
                ? subscriptionModel.isSubscriptionActive(user.id)
                    ? '‚úÖ'
                    : 'üíÄ'
                : '‚ùå';

            keyboard
                .text(`${statusEmoji}${roleEmoji}${subStatus} ${user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`, `admin_user:${user.id}`)
                .row();
        });

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if (page > 0) {
            keyboard.text('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', `admin_users:${page - 1}`);
        }
        if (startIndex + pageSize < users.length) {
            keyboard.text('–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', `admin_users:${page + 1}`);
        }

        keyboard.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_menu');

        await ctx.editMessageText(message, {
            reply_markup: keyboard,
            parse_mode: 'HTML',
        });
        await ctx.answerCallbackQuery();
    },

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    showUserDetail: async (ctx, userId) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        const userDetails = await adminService.getUserDetails(userId);
        if (!userDetails) {
            await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return;
        }

        const { user, subscription, hasActiveSubscription, orders, totalOrders, paidOrders, totalSpent } = userDetails;

        let message = `üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n`;
        message += `üÜî ID: <code>${user.id}</code>\n`;
        message += `üë§ –ò–º—è: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${user.status === 'ACTIVE' ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n`;
        message += `üëë –†–æ–ª—å: ${user.role}\n`;
        message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${dayjs(user.createdAt).format('DD.MM.YYYY HH:mm')}\n\n`;

        message += `üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> `;
        if (subscription) {
            const endDate = dayjs(subscription.endDate).format('DD.MM.YYYY');
            message += `${hasActiveSubscription ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : 'üíÄ –ò—Å—Ç–µ–∫–ª–∞'}\n`;
            message += `üì¶ –¢–∞—Ä–∏—Ñ: ${subscription.planType}\n`;
            message += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${endDate}\n`;
        } else {
            message += `‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏\n`;
        }

        message += `\nüì¶ <b>–ó–∞–∫–∞–∑—ã:</b> ${totalOrders} (–û–ø–ª–∞—á–µ–Ω–æ: ${paidOrders})\n`;
        message += `üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent} —Ä—É–±.\n`;

        const keyboard = new InlineKeyboard()
            .text('üì¶ –ó–∞–∫–∞–∑—ã', `admin_user_orders:${userId}`)
            .text('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', `admin_user_subscription:${userId}`)
            .row();

        if (user.status === 'ACTIVE') {
            keyboard.text('‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_toggle_user:${userId}`);
        } else {
            keyboard.text('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_toggle_user:${userId}`);
        }

        keyboard.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_users:0');

        await ctx.editMessageText(message, {
            reply_markup: keyboard,
            parse_mode: 'HTML',
        });
        await ctx.answerCallbackQuery();
    },

    // –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showUserOrders: async (ctx, userId) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        const user = userModel.findById(userId);
        if (!user) {
            await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            await adminController.showUsersList(ctx, 0); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return;
        }

        const orders = orderModel.findByUserId(userId, 100);

        let message = `üì¶ <b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n`;
        message += `üë§ ${user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId})\n\n`;

        const keyboard = new InlineKeyboard();

        if (orders.length === 0) {
            message += 'üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤';
        } else {
            orders.forEach((order) => {
                const emoji = order.status === 'PAID' ? '‚úÖ' : order.status === 'PENDING' ? '‚è≥' : '‚ùå';
                const date = dayjs(order.createdAt).format('DD.MM.YYYY');

                keyboard
                    .text(
                        `${emoji} ${order.orderNumber} - ${order.amount} —Ä—É–±.`,
                        `admin_order_detail:${order.orderNumber}`
                    )
                    .row();
            });
        }

        keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `admin_user:${userId}`);

        await ctx.editMessageText(message, {
            reply_markup: keyboard,
            parse_mode: 'HTML',
        });
        await ctx.answerCallbackQuery();
    },

    // –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    showOrderDetail: async (ctx, orderNumber) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        const order = orderModel.findByOrderNumber(orderNumber);
        if (!order) {
            await ctx.answerCallbackQuery({ text: '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return;
        }

        const user = userModel.findById(order.userId);

        let message = `üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b>\n\n`;
        message += `üÜî –ù–æ–º–µ—Ä: ${order.orderNumber}\n`;
        message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${order.userId})\n`;
        message += `üì¶ –¢–∞—Ä–∏—Ñ: ${order.planType}\n`;
        message += `üí∞ –°—É–º–º–∞: ${order.amount} —Ä—É–±.\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
        message += `üìÖ –°–æ–∑–¥–∞–Ω: ${dayjs(order.createdAt).format('DD.MM.YYYY HH:mm')}\n`;

        const keyboard = new InlineKeyboard();

        if (order.status === 'PENDING') {
            keyboard.text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', `admin_delete_order:${order.orderNumber}`).row();
        }

        keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `admin_user_orders:${order.userId}`);

        await ctx.editMessageText(message, {
            reply_markup: keyboard,
            parse_mode: 'HTML',
        });
        await ctx.answerCallbackQuery();
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showUserSubscription: async (ctx, userId) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        const user = userModel.findById(userId);
        const subscription = subscriptionModel.findByUserId(userId);
        const hasActiveSubscription = subscriptionModel.isSubscriptionActive(userId);

        let message = `üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n`;
        message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n\n`;

        if (subscription) {
            const endDate = dayjs(subscription.endDate).format('DD.MM.YYYY');
            message += `üì¶ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ${subscription.planType}\n`;
            message += `üìä –°—Ç–∞—Ç—É—Å: ${hasActiveSubscription ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : 'üíÄ –ò—Å—Ç–µ–∫–ª–∞'}\n`;
            message += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${endDate}\n\n`;
        } else {
            message += `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
        }

        message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        const keyboard = new InlineKeyboard()
            .text('üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π', `admin_extend_sub:${userId}:30`)
            .text('üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 90 –¥–Ω–µ–π', `admin_extend_sub:${userId}:90`)
            .row();

        if (subscription) {
            keyboard.text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `admin_delete_sub:${userId}`).row();
        }

        keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `admin_user:${userId}`);

        await ctx.editMessageText(message, {
            reply_markup: keyboard,
            parse_mode: 'HTML',
        });
        await ctx.answerCallbackQuery();
    },

    handleAction: async (ctx, action, ...params) => {
        if (!adminService.isAdmin(String(ctx.from.id))) {
            await ctx.answerCallbackQuery({ text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            return;
        }

        try {
            let result;
            let message = '';
            let userId = null;

            switch (action) {
                case 'toggle_user':
                    userId = params[0];
                    result = await adminService.toggleUserStatus(userId);
                    message = result.message;
                    break;

                case 'delete_order':
                    const orderNumber = params[0];
                    result = await adminService.deleteOrder(orderNumber);
                    message = result.message;

                    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    const deletedOrder = orderModel.findByOrderNumber(orderNumber);
                    userId = deletedOrder ? deletedOrder.userId : null;
                    break;

                case 'extend_sub':
                    userId = params[0];
                    const days = parseInt(params[1]);
                    result = await adminService.updateUserSubscription(userId, `EXTEND_${days}`, days);
                    message = result.message;
                    break;

                case 'delete_sub':
                    userId = params[0];
                    result = await adminService.deleteUserSubscription(userId);
                    message = result.message;
                    break;
            }

            await ctx.answerCallbackQuery({ text: message, show_alert: true });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π userId
            if (userId) {
                switch (action) {
                    case 'toggle_user':
                        await adminController.showUserDetail(ctx, userId);
                        break;
                    case 'delete_order':
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                        if (userId) {
                            await adminController.showUserOrders(ctx, userId);
                        } else {
                            // –ï—Å–ª–∏ userId –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            await adminController.showUsersList(ctx, 0);
                        }
                        break;
                    case 'extend_sub':
                    case 'delete_sub':
                        await adminController.showUserSubscription(ctx, userId);
                        break;
                }
            } else {
                // –ï—Å–ª–∏ userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
                await adminController.showAdminMenu(ctx);
            }
        } catch (error) {
            console.error('Admin action error:', error);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è' });

            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
            await adminController.showAdminMenu(ctx);
        }
    },
};
