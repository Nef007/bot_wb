import { InlineKeyboard } from 'grammy';
import { productApiService } from '../services/productApiService.js';
import { userProductSubscriptionModel } from '../db/models/userProductSubscriptionModel.js';
import { productModel } from '../db/models/productModel.js';
import { priceHistoryModel } from '../db/models/priceHistoryModel.js';

export const productController = {
    /**
     * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    startAddProduct: async (ctx) => {
        try {
            const menuHtml = `
‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries.

–ü—Ä–∏–º–µ—Ä:
<code>https://www.wildberries.ru/catalog/123456789/detail.aspx</code>

–Ø –Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
            `;

            const keyboard = new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'main_menu');

            await ctx.editMessageText(menuHtml, {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });

            ctx.session.waitingForProductUrl = true;
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –°–¢–ê–†–¢–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message || e}`);
        }
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
     */
    handleProductUrl: async (ctx) => {
        try {
            const userId = String(ctx.from.id);
            const url = ctx.message.text.trim();

            // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ WB
            const isWbUrl =
                (url.includes('wildberries.') &&
                    (url.includes('/catalog/') || url.includes('nm=') || url.includes('/detail'))) ||
                /^\d+$/.test(url); // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã (–∞—Ä—Ç–∏–∫—É–ª)

            if (!isWbUrl) {
                await ctx.reply(
                    '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Ç–æ–≤–∞—Ä–∞ Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/123456789/detail.aspx\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∞—Ä—Ç–∏–∫—É–ª: 123456789'
                );
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            const loadingMessage = await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...');

            try {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º nmId –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                const nmId = productApiService.extractNmIdFromUrl(url);
                console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω nmId: ${nmId} –∏–∑ URL: ${url}`);

                const productData = await productApiService.fetchProductByNmId(nmId);

                if (!productData) {
                    await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
                    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä
                const existingSubscription = await userProductSubscriptionModel.findByUserAndProduct(userId, nmId);
                if (existingSubscription) {
                    await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
                    await ctx.reply('‚ùå –í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.');
                    return;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å category_id = NULL)
                await productModel.upsert({
                    ...productData,
                    category_id: null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º NULL –≤–º–µ—Å—Ç–æ 0
                });

                // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                const subscriptionId = await userProductSubscriptionModel.create(userId, productData);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
                await productController.showProductDetail(ctx, nmId, null, false);
            } catch (error) {
                await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            ctx.session.waitingForProductUrl = false;
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–°–´–õ–ö–ò –¢–û–í–ê–†–ê', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: ${e.message || e}`);
        }
    },

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
     */
    showProductDetail: async (ctx, productNmId, messageIdToEdit = null, fromMySubscriptions = false) => {
        try {
            const userId = String(ctx.from.id);
            const subscription = await userProductSubscriptionModel.findByUserAndProduct(userId, productNmId);

            if (!subscription) {
                await ctx.reply('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            const product = await productModel.findByNmId(productNmId);
            const currentPrice = product?.current_price || subscription.current_price;

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const priceHistory = await priceHistoryModel.getLastTwoPrices(productNmId);
            const lastPrice = priceHistory && priceHistory.length >= 2 ? priceHistory[1].price : currentPrice;

            const priceChange = currentPrice - lastPrice;
            const percentChange = lastPrice > 0 ? ((priceChange / lastPrice) * 100).toFixed(2) : 0;

            const menuHtml = `
üì¶ <b>${subscription.product_name}</b>
${subscription.product_brand ? `üè∑Ô∏è <b>–ë—Ä–µ–Ω–¥:</b> ${subscription.product_brand}\n` : ''}
üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${currentPrice} —Ä—É–±.
${
    priceChange !== 0
        ? `üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> ${priceChange > 0 ? '+' : ''}${priceChange} —Ä—É–±. (${percentChange}%)\n`
        : ''
}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> ${product?.rating || subscription.rating || 0}
üí¨ <b>–û—Ç–∑—ã–≤—ã:</b> ${product?.feedbacks_count || subscription.feedbacks_count || 0}

‚ö° <b>–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> ${subscription.alert_threshold}%

üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>
${subscription.last_scan_at ? new Date(subscription.last_scan_at).toLocaleString('ru-RU') : '–ï—â–µ –Ω–µ –±—ã–ª–æ'}

üîó <a href="${subscription.product_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>
        `;

            const keyboard = new InlineKeyboard()
                .text(subscription.alert_threshold === 5 ? '‚úÖ 5%' : '5%', `set_product_threshold_${productNmId}_5`)
                .text(subscription.alert_threshold === 10 ? '‚úÖ 10%' : '10%', `set_product_threshold_${productNmId}_10`)
                .text(subscription.alert_threshold === 15 ? '‚úÖ 15%' : '15%', `set_product_threshold_${productNmId}_15`)
                .row()
                .text(subscription.alert_threshold === 20 ? '‚úÖ 20%' : '20%', `set_product_threshold_${productNmId}_20`)
                .text(subscription.alert_threshold === 25 ? '‚úÖ 25%' : '25%', `set_product_threshold_${productNmId}_25`)
                .text(subscription.alert_threshold === 30 ? '‚úÖ 30%' : '30%', `set_product_threshold_${productNmId}_30`)
                .row()
                .text('üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫', `show_product_chart_${productNmId}`)
                .row()
                .text('‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', `unsubscribe_product_${productNmId}`)
                .row();

            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            if (fromMySubscriptions) {
                keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'my_subscriptions');
            } else {
                keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu');
            }

            let finalMessage;

            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (messageIdToEdit) {
                try {
                    finalMessage = await ctx.editMessageText(menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                        disable_web_page_preview: false,
                    });
                } catch (editError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', editError);
                    finalMessage = await ctx.reply(menuHtml, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML',
                        disable_web_page_preview: false,
                    });
                }
            } else {
                finalMessage = await ctx.reply(menuHtml, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                    disable_web_page_preview: false,
                });
            }

            ctx.session.currentMenu = {
                type: 'product_detail',
                productNmId: productNmId,
                messageId: finalMessage.message_id,
                fromMySubscriptions: fromMySubscriptions,
            };
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –î–ï–¢–ê–õ–ï–ô –¢–û–í–ê–†–ê', e);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: ${e.message || e}`);
        }
    },

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
     */
    setProductThreshold: async (ctx, productNmId, threshold) => {
        try {
            const userId = String(ctx.from.id);
            const subscription = await userProductSubscriptionModel.findByUserAndProduct(userId, productNmId);

            if (!subscription) {
                await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥
            await userProductSubscriptionModel.updateThreshold(subscription.id, threshold);

            console.log(`‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ—Ä–æ–≥ ${threshold}% –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productNmId}`);

            await ctx.answerCallbackQuery({ text: `‚úÖ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${threshold}%` });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const fromMySubscriptions = ctx.session.currentMenu?.fromMySubscriptions || false;
            await productController.showProductDetail(
                ctx,
                productNmId,
                ctx.callbackQuery.message.message_id,
                fromMySubscriptions
            );
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –ü–û–†–û–ì–ê –¢–û–í–ê–†–ê', e);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞' });
        }
    },

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞
     */
    unsubscribeFromProduct: async (ctx, productNmId) => {
        try {
            const userId = String(ctx.from.id);

            await userProductSubscriptionModel.deleteByUserAndProduct(userId, productNmId);

            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ ${productNmId}`);

            await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç–º–µ–Ω–µ–Ω–∞' });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
            await categoryController.showMySubscriptions(ctx, ctx.callbackQuery.message.message_id);
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –û–¢–ü–ò–°–ö–ò –û–¢ –¢–û–í–ê–†–ê', e);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ' });
        }
    },

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)
     */
    showProductChart: async (ctx, productNmId) => {
        try {
            await ctx.answerCallbackQuery({
                text: 'üìä –§—É–Ω–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!',
            });
        } catch (e) {
            console.error('–û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –ì–†–ê–§–ò–ö–ê', e);
            await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞' });
        }
    },
};
