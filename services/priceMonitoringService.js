// services/priceMonitoringService.js
import axios from 'axios';
import { getDB } from '../db/connection.js';
import { userCategorySubscriptionModel } from '../db/models/userCategorySubscriptionModel.js';
import { wbCategoryModel } from '../db/models/wbCategory.js';
import { productModel } from '../db/models/productModel.js';
import { priceHistoryModel } from '../db/models/priceHistoryModel.js';
import dayjs from 'dayjs';
import { wrapper } from 'axios-cookiejar-support';
import { CookieJar } from 'tough-cookie';

const jar = new CookieJar();
const client = wrapper(axios.create({ jar }));

export class PriceMonitoringService {
    constructor() {
        this.scanDelay = 3000;
        this.maxPages = 5;
        this.currentlyScanning = new Set(); //
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º axios —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫
        this.initAxiosWithCookies();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è axios —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫
     */
    initAxiosWithCookies() {
        try {
            const jar = new CookieJar();
            this.axiosWithCookies = wrapper(
                axios.create({
                    jar,
                    withCredentials: true,
                })
            );

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            this.setInitialCookies();
            console.log('‚úÖ Axios —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ axios —Å –∫—É–∫–∞–º–∏:', error.message);
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π axios
            this.axiosWithCookies = axios;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫—É–∫ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
     */
    setInitialCookies() {
        const baseUrl = 'https://www.wildberries.ru';

        // –ë–∞–∑–æ–≤—ã–µ –∫—É–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        const initialCookies = [
            `wb__lang=ru; Domain=.wildberries.ru; Path=/`,
            `wbx__navigatorInfoSended=true; Domain=.wildberries.ru; Path=/`,
            `splitInfoV2=${encodeURIComponent(
                JSON.stringify({
                    splitInfo: {
                        common: [{ key: 'ab_kt_duplicates_items', value: 'new_widget' }],
                        search: [{ key: 'ab_testid', value: 'popular_sort' }],
                        rec: [{ key: 'ab_sim_vecdot', value: 'test_50' }],
                    },
                    t: Date.now(),
                    authed: false,
                })
            )}; Domain=.wildberries.ru; Path=/`,
        ];

        initialCookies.forEach((cookie) => {
            try {
                this.axiosWithCookies.defaults.jar.setCookieSync(cookie, baseUrl);
            } catch (error) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookie:', cookie.substring(0, 50));
            }
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
     */
    async startMonitoring(bot) {
        try {
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...');

            const activeSubscriptions = await userCategorySubscriptionModel.findAllActive();
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions.length}`);

            if (activeSubscriptions.length === 0) {
                console.log('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
                return;
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const uniqueCategories = this.groupSubscriptionsByCategory(activeSubscriptions);
            console.log(`üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${uniqueCategories.size}`);

            for (const [categoryId, subscriptions] of uniqueCategories) {
                try {
                    await this.processCategory(categoryId, subscriptions, bot);
                    await this.delay(1000);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error.message);
                }
            }

            console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        }
    }

    groupSubscriptionsByCategory(subscriptions) {
        const categories = new Map();

        for (const subscription of subscriptions) {
            const categoryId = subscription.category_id;

            if (!categories.has(categoryId)) {
                categories.set(categoryId, []);
            }

            categories.get(categoryId).push(subscription);
        }

        return categories;
    }

    async processCategory(categoryId, subscriptions, bot) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (this.currentlyScanning.has(categoryId)) {
            console.log(`‚è≠Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} —É–∂–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }

        try {
            this.currentlyScanning.add(categoryId);

            const category = await wbCategoryModel.findById(categoryId);
            if (!category) {
                console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            console.log(`\nüîç –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category.name} (ID: ${categoryId})`);
            console.log(`üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriptions.length}`);

            // –ë–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            // const mainSubscription = subscriptions[0];
            const scanPages = Math.max(...subscriptions.map((s) => s.scan_pages || 10));

            // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑
            const products = await this.scanCategoryProducts(category, scanPages);
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}`);

            if (products.length === 0) {
                console.log(`‚ÑπÔ∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤`);
                return;
            }

            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –µ–≥–æ –ø–æ—Ä–æ–≥—É
            for (const subscription of subscriptions) {
                try {
                    await this.analyzeAndNotifyUser(subscription, products, category, bot);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscription.user_id}:`, error.message);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            for (const subscription of subscriptions) {
                await userCategorySubscriptionModel.updateLastScan(subscription.id);
            }
        } finally {
            // –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            this.currentlyScanning.delete(categoryId);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async analyzeAndNotifyUser(subscription, products, category, bot) {
        const alerts = await this.analyzePriceChanges(products, subscription.alert_threshold, subscription.user_id);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (alerts.length > 0) {
            await this.sendPriceAlerts(alerts, subscription, bot);
        }

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscription.user_id}: ${alerts.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    async fetchCategoryPage(category, page = 1) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π query –ø–∞—Ä–∞–º–µ—Ç—Ä
            const query = this.buildCategoryQuery(category);
            console.log(`üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω query: ${query}`);

            const url = 'https://u-search.wb.ru/exactmatch/ru/common/v18/search';

            const params = {
                ab_testid: 'popular_sort',
                ab_testing: 'false',
                appType: 1,
                curr: 'rub',
                dest: -1257786,
                inheritFilters: 'false',
                lang: 'ru',
                page: page,
                query: query,
                resultset: 'catalog',
                sort: 'popular',
                spp: 30,
                suppressSpellcheck: 'false',
            };

            console.log(`üîó –ó–∞–ø—Ä–æ—Å —Å –∫—É–∫–∞–º–∏: ${url}?${new URLSearchParams(params)}`);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            const timestamp = Math.floor(Date.now() / 1000);
            const queryId = `qid${timestamp}${Math.random().toString().substring(2, 12)}`;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º axios —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫
            const response = await this.axiosWithCookies.get(url, {
                params: params,
                timeout: 20000,
                withCredentials: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫
                headers: {
                    'User-Agent':
                        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 YaBrowser/25.8.0.0 Safari/537.36',
                    Accept: '*/*',
                    'Accept-Language': 'ru,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    Referer: `https://www.wildberries.ru/catalog/elektronika/smart-chasy?sort=popular&page=${page}`,
                    Origin: 'https://www.wildberries.ru',
                    'Sec-Fetch-Dest': 'empty',
                    'Sec-Fetch-Mode': 'cors',
                    'Sec-Fetch-Site': 'cross-site',
                    Priority: 'u=1, i',
                    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò:
                    'x-queryid': queryId,
                    'x-userid': '0',
                },
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            // console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', {
            //     hasMetadata: !!response.data?.metadata,
            //     catalogType: response.data?.metadata?.catalog_type,
            //     normquery: response.data?.metadata?.normquery,
            //     name: response.data?.metadata?.name,
            //     catalog_value: response.data?.metadata?.catalog_value?.substring(0, 50) + '...',
            //     productCount: response.data?.products?.length || 0,
            // });

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (response.data?.products && response.data.products.length > 0) {
                console.log('üîç –ü–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞:');
                response.data.products.slice(0, 3).forEach((product, index) => {
                    console.log(`   ${index + 1}. ${product.name} (ID: ${product.id})`);
                });
            }

            let products = [];

            if (response.data?.data?.products) {
                products = response.data.data.products;
            } else if (response.data?.products) {
                products = response.data.products;
            } else if (Array.isArray(response.data)) {
                products = response.data;
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

            return products.map((product) => this.normalizeProductData(product, category.id));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
            if (error.response) {
                console.error(`   Status: ${error.response.status}`);
                console.error(`   Headers:`, error.response.headers);
            }
            return [];
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    buildCategoryQuery(category) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å search_query - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (—Å–∞–º—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        if (category.search_query) {
            console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º search_query –∏–∑ –±–∞–∑—ã: ${category.search_query}`);
            return category.search_query;
        }

        // –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π query - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (category.query && category.query.includes('menu_redirect_subject_v2')) {
            console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º query –∏–∑ –±–∞–∑—ã: ${category.query}`);
            return category.query;
        }

        // –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º query –ø–æ —à–∞–±–ª–æ–Ω—É: menu_redirect_subject_v2_{id} {name}
        console.log(`üéØ –§–æ—Ä–º–∏—Ä—É–µ–º query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: menu_redirect_subject_v2_${category.id} ${category.name}`);
        return `menu_redirect_subject_v2_${category.id} ${category.name}`;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
     */
    normalizeProductData(productData, categoryId) {
        //  console.log(`üîç –¢–æ–≤–∞—Ä: ${productData.name}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É - –û–°–ù–û–í–ù–û–ô –°–ü–û–°–û–ë –ß–ï–†–ï–ó sizes[0].price.product
        let priceU = 0;

        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º product —Ü–µ–Ω—É –∏–∑ sizes (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        if (productData.sizes && productData.sizes.length > 0) {
            const firstSize = productData.sizes[0];

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º product —Ü–µ–Ω—É (—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π)
            if (firstSize.price?.product && firstSize.price.product > 0) {
                priceU = firstSize.price.product;
                //    console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º sizes[0].price.product: ${priceU}`);
            }
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: basic —Ü–µ–Ω–∞
            else if (firstSize.price?.basic && firstSize.price.basic > 0) {
                priceU = firstSize.price.basic;
                //    console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º sizes[0].price.basic: ${priceU}`);
            } else {
                console.log('‚ùå –í—Å–µ —Ü–µ–Ω—ã –≤ sizes —Ä–∞–≤–Ω—ã 0 –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:', {
                    product: firstSize.price?.product,
                    basic: firstSize.price?.basic,
                    rank: firstSize.rank,
                });
            }
        }
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä—è–º—ã–µ –ø–æ–ª—è (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
        else if (productData.salePriceU && productData.salePriceU > 0) {
            priceU = productData.salePriceU;
            //  console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º salePriceU: ${priceU}`);
        } else if (productData.priceU && productData.priceU > 0) {
            priceU = productData.priceU;
            //  console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º priceU: ${priceU}`);
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏ (—Ü–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö)
        const priceInRubles = priceU ? Math.round(priceU / 100) : 0;

        if (priceInRubles === 0) {
            console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –¶–ï–ù–ê –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${productData.name}`);
            console.log(`üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:`, {
                hasSizes: !!productData.sizes,
                sizeCount: productData.sizes ? productData.sizes.length : 0,
                sizeProductPrice: productData.sizes?.[0]?.price?.product,
                sizeBasicPrice: productData.sizes?.[0]?.price?.basic,
                sizeRank: productData.sizes?.[0]?.rank,
                salePriceU: productData.salePriceU,
                priceU: productData.priceU,
            });
        } else {
            // console.log(`üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${priceInRubles} —Ä—É–±.`);
        }

        const normalizedProduct = {
            nm_id: productData.id,
            name: productData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            brand: productData.brand || '',
            brandId: productData.brandId || 0,
            category_id: categoryId,
            current_price: priceInRubles,
            rating: productData.rating || productData.reviewRating || 0,
            feedbacks_count: productData.feedbacks || productData.feedbackCount || 0,
            image_url: this.getProductImageUrl(productData.id),
            supplier: productData.supplier || '',
            supplier_id: productData.supplierId || 0,
        };

        return normalizedProduct;
    }
    async scanCategoryProducts(category, pagesToScan = 10) {
        const allProducts = [];
        const actualPages = Math.min(pagesToScan, this.maxPages);

        for (let page = 1; page <= actualPages; page++) {
            try {
                console.log(`üìÑ –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${actualPages}`);

                const products = await this.fetchCategoryPage(category, page);

                if (!products || products.length === 0) {
                    console.log(`‚ÑπÔ∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`);
                    break;
                }

                console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

                // –î–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∂–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                if (page === 1 && products.length > 0) {
                    console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–ï–†–í–´–• –¢–û–í–ê–†–û–í:');
                    for (let i = 0; i < Math.min(3, products.length); i++) {
                        const product = products[i];
                        console.log(`üì¶ –¢–æ–≤–∞—Ä ${i + 1}: ${product.name}`);
                        console.log(
                            `üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ sizes:`,
                            product.sizes?.[0]
                                ? {
                                      rank: product.sizes[0].rank,
                                      price: product.sizes[0].price,
                                  }
                                : '–ù–µ—Ç sizes'
                        );
                    }
                }

                allProducts.push(...products);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É
                await this.saveProductsToDatabase(products, category.id);

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                if (page < actualPages) {
                    await this.delay(this.scanDelay);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
                break;
            }
        }

        return allProducts;
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    getProductImageUrl(productId) {
        if (!productId) return '';

        try {
            const nm = parseInt(productId, 10);
            const vol = Math.floor(nm / 1e5);
            const part = Math.floor(nm / 1e3);

            let host = '01';
            if (vol >= 0 && vol <= 143) host = '01';
            else if (vol >= 144 && vol <= 287) host = '02';
            else if (vol >= 288 && vol <= 431) host = '03';
            else if (vol >= 432 && vol <= 719) host = '04';
            else if (vol >= 720 && vol <= 1007) host = '05';
            else if (vol >= 1008 && vol <= 1061) host = '06';
            else if (vol >= 1062 && vol <= 1115) host = '07';
            else if (vol >= 1116 && vol <= 1169) host = '08';
            else if (vol >= 1170 && vol <= 1313) host = '09';
            else if (vol >= 1314 && vol <= 1601) host = '10';
            else if (vol >= 1602 && vol <= 1655) host = '11';
            else if (vol >= 1656 && vol <= 1919) host = '12';
            else host = '01';

            return `https://basket-${host}.wbbasket.ru/vol${vol}/part${part}/${nm}/images/big/1.jpg`;
        } catch (error) {
            return '';
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async saveProductsToDatabase(products) {
        let savedCount = 0;
        let errorCount = 0;

        //  console.log(`üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤...`);

        for (const product of products) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if (!product.nm_id) {
                    console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ ID: ${product.name}`);
                    errorCount++;
                    continue;
                }

                if (!product.name) {
                    console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: ID ${product.nm_id}`);
                    errorCount++;
                    continue;
                }

                if (!product.current_price || product.current_price === 0) {
                    console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π: ${product.name} (${product.nm_id})`);
                    continue;
                }

                //  console.log(`üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä: ${product.name}, —Ü–µ–Ω–∞: ${product.current_price} —Ä—É–±.`);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä
                try {
                    const result = productModel.upsert(product);

                    const lastPriceRecord = priceHistoryModel.getLastPrice(product.nm_id);
                    const lastPrice = lastPriceRecord ? lastPriceRecord.price : null;

                    if (product.current_price > 0 && product.current_price !== lastPrice) {
                        priceHistoryModel.create(product.nm_id, product.current_price);
                        console.log(
                            `‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ products —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${product.nm_id}  ${product.current_price} =>  ${lastPrice} `
                        );
                    }
                    // console.log(`‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ products: ${product.nm_id}`);
                } catch (upsertError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ upsert —Ç–æ–≤–∞—Ä–∞ ${product.nm_id}:`, upsertError.message);
                    errorCount++;
                    continue;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                // if (product.current_price > 0) {
                //     try {
                //         priceHistoryModel.create(product.nm_id, product.current_price);
                //         //   console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${product.nm_id} - ${product.current_price} —Ä—É–±.`);
                //     } catch (historyError) {
                //         console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω ${product.nm_id}:`, historyError.message);
                //     }
                // }

                savedCount++;
            } catch (error) {
                console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.nm_id}:`, error);
                errorCount++;
            }
        }

        //  console.log(`üíæ –ò—Ç–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${savedCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫ –∏–∑ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
     */
    async analyzePriceChanges(products, threshold, userId) {
        const alerts = [];

        for (const product of products) {
            try {
                if (!product.nm_id || product.current_price === 0) {
                    continue;
                }

                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É
                const lastTwoPrices = priceHistoryModel.getLastTwoPrices(product.nm_id);

                if (!lastTwoPrices || lastTwoPrices.length < 2) {
                    continue;
                }

                // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
                const [currentRecord, previousRecord] = lastTwoPrices;
                const previousPrice = previousRecord.price; // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞
                const currentPrice = currentRecord.price; // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                if (previousPrice === currentPrice) {
                    continue;
                }

                console.log(`üéØ –¶–ï–ù–´ –†–ê–ó–ù–´–ï: ${product.nm_id}  ${previousPrice} ‚Üí ${currentPrice}`);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                const priceChange = this.calculatePriceChange(previousPrice, currentPrice);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ threshold
                if (priceChange <= -threshold) {
                    alerts.push({
                        user_id: userId,
                        product_id: product.nm_id,
                        product_name: product.name,
                        brand: product.brand,
                        image_url: product.image_url,
                        old_price: previousPrice,
                        new_price: currentPrice,
                        percent_change: priceChange,
                        threshold: threshold,
                    });

                    // –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –≤ –±–∞–∑–µ
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ ${product.nm_id}:`, error.message);
            }
        }

        return alerts;
    }
    /**
     * –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    calculatePriceChange(oldPrice, newPrice) {
        if (!oldPrice || oldPrice === 0) return 0;

        const change = ((newPrice - oldPrice) / oldPrice) * 100;
        return Math.round(change * 100) / 100;
    }

    formatAlertMessage(alert, categoryName) {
        const changeIcon = alert.percent_change > 0 ? 'üìà' : 'üìâ';
        const changeType = alert.percent_change > 0 ? '–ø–æ–¥–æ—Ä–æ–∂–∞–ª' : '–ø–æ–¥–µ—à–µ–≤–µ–ª';
        const changeColor = alert.percent_change > 0 ? 'üî¥' : 'üü¢';

        // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ Wildberries
        const productUrl = `https://www.wildberries.ru/catalog/${alert.product_id}/detail.aspx`;

        return `
${changeColor} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>


<b>${alert.product_id}</b>
üì¶ <b>${alert.product_name}</b>
üè∑Ô∏è –ë—Ä–µ–Ω–¥: ${alert.brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}

üí∞ <b>–¶–µ–Ω–∞:</b> ${alert.old_price} —Ä—É–±. () ‚Üí ${alert.new_price} —Ä—É–±. ()
${changeIcon} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> ${Math.abs(alert.percent_change)}% ${changeType}

‚ö° <b>–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${alert.threshold}%

üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: ${productUrl}

üïí ${dayjs().tz('Europe/Moscow').format('DD.MM.YYYY HH:mm')}
    `.trim();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω
     */
    async sendPriceAlerts(alerts, subscription, bot) {
        for (const alert of alerts) {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
                this.saveAlertToDatabase(alert);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const message = this.formatAlertMessage(alert, subscription.category_name);

                console.log(
                    `üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${subscription.user_id}: ${alert.product_name} - ${alert.percent_change}%`
                );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                await bot.api.sendMessage(subscription.user_id, message, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
                });
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error.message);
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
     */
    saveAlertToDatabase(alert) {
        const db = getDB();
        try {
            db.prepare(
                `
                INSERT INTO price_alerts 
                (user_id, product_id, old_price, new_price, percent_change, threshold, created_at)
                VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            `
            ).run(
                alert.user_id,
                alert.product_id,
                alert.old_price,
                alert.new_price,
                alert.percent_change,
                alert.threshold
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    delay(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const priceMonitoringService = new PriceMonitoringService();

/**
 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export function startPeriodicMonitoring(bot) {
    const INTERVAL_MINUTES = 10;
    const intervalMs = INTERVAL_MINUTES * 60 * 1000;

    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ ${INTERVAL_MINUTES} –º–∏–Ω—É—Ç)`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    priceMonitoringService.startMonitoring(bot).catch(console.error);

    // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    setInterval(() => {
        console.log(`\nüîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...`);
        priceMonitoringService.startMonitoring(bot).catch(console.error);
    }, intervalMs);
}
