// services/monitoringOrchestrator.js
import { WBPriceMonitoringService } from '../market/wb/monitoringService.js';
import { OzonPriceMonitoringService } from '../market/ozon/monitoringService.js';

export class MonitoringOrchestrator {
    constructor() {
        this.monitoringServices = new Map();
        this.monitoringInterval = null;

        this.registerDefaultServices();
    }

    registerDefaultServices() {
        // Wildberries (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å)
        this.registerService('wildberries', new WBPriceMonitoringService());

        // Ozon (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω)
        this.registerService('ozon', new OzonPriceMonitoringService());

        console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${this.monitoringServices.size}`);
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    registerService(serviceKey, serviceInstance) {
        if (this.monitoringServices.has(serviceKey)) {
            console.warn(`‚ö†Ô∏è –°–µ—Ä–≤–∏—Å '${serviceKey}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
            return false;
        }

        this.monitoringServices.set(serviceKey, serviceInstance);
        console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å: ${serviceKey}`);
        return true;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    startPeriodicMonitoring() {
        const intervalMs = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

        console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.startAllMonitoring();

        // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        this.monitoringInterval = setInterval(() => {
            console.log(`\nüîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...`);
            this.startAllMonitoring();
        }, intervalMs);
    }

    async startAllMonitoring() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.isAnyMonitoringRunning()) {
            console.log('‚è≠Ô∏è –û–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            return;
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (${this.monitoringServices.size})...`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const monitoringPromises = Array.from(this.monitoringServices.entries()).map(async ([serviceKey, service]) => {
            try {
                console.log(`üîÑ –ó–∞–ø—É—Å–∫ ${serviceKey}...`);
                await service.startMonitoring();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ ${serviceKey}:`, error.message);
            }
        });

        await Promise.allSettled(monitoringPromises);
        console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    }

    stopAllMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }

        this.monitoringServices.forEach((service, serviceKey) => {
            if (service.isRunning) {
                service.stopMonitoring();
                console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å: ${serviceKey}`);
            }
        });

        console.log('üõë –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    isAnyMonitoringRunning() {
        return Array.from(this.monitoringServices.values()).some((service) => service.isRunning);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    getStatus() {
        const servicesStatus = {};
        let totalRunning = 0;

        this.monitoringServices.forEach((service, serviceKey) => {
            servicesStatus[serviceKey] = service.getStatus();
            if (service.isRunning) totalRunning++;
        });

        return {
            totalServices: this.monitoringServices.size,
            runningServices: totalRunning,
            isAnyRunning: this.isAnyMonitoringRunning(),
            hasScheduledMonitoring: !!this.monitoringInterval,
            services: servicesStatus,
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    getServiceStatus(serviceKey) {
        const service = this.monitoringServices.get(serviceKey);
        return service ? service.getStatus() : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    getRegisteredServices() {
        return Array.from(this.monitoringServices.keys());
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const monitoringOrchestrator = new MonitoringOrchestrator();
