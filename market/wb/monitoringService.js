// services/priceMonitoringService.js
import axios from 'axios';
import { getDB } from '../../db/connection.js';
import { userCategorySubscriptionModel } from '../../db/models/userCategorySubscriptionModel.js';
import { wbCategoryModel } from '../../db/models/wbCategory.js';
import { productModel } from '../../db/models/productModel.js';
import { priceHistoryModel } from '../../db/models/priceHistoryModel.js';
import dayjs from 'dayjs';
import { wrapper } from 'axios-cookiejar-support';
import { CookieJar } from 'tough-cookie';
import { telegramNotificationService } from '../../services/telegramNotificationService.js';
import utc from 'dayjs/plugin/utc.js';
import timezone from 'dayjs/plugin/timezone.js';

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.tz.setDefault('Europe/Moscow');

export class PriceMonitoringService {
    constructor() {
        this.scanDelay = 3000;
        this.maxPages = 2;
        this.currentlyScanning = new Set();
        this.initAxiosWithCookies();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è axios —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫
     */
    initAxiosWithCookies() {
        try {
            const jar = new CookieJar();
            this.axiosWithCookies = wrapper(
                axios.create({
                    jar,
                    withCredentials: true,
                })
            );
            this.setInitialCookies();
            console.log('‚úÖ Axios —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ axios —Å –∫—É–∫–∞–º–∏:', error.message);
            this.axiosWithCookies = axios;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫—É–∫ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
     */
    setInitialCookies() {
        const baseUrl = 'https://www.wildberries.ru';
        const initialCookies = [
            `wb__lang=ru; Domain=.wildberries.ru; Path=/`,
            `wbx__navigatorInfoSended=true; Domain=.wildberries.ru; Path=/`,
            `splitInfoV2=${encodeURIComponent(
                JSON.stringify({
                    splitInfo: {
                        common: [{ key: 'ab_kt_duplicates_items', value: 'new_widget' }],
                        search: [{ key: 'ab_testid', value: 'popular_sort' }],
                        rec: [{ key: 'ab_sim_vecdot', value: 'test_50' }],
                    },
                    t: Date.now(),
                    authed: false,
                })
            )}; Domain=.wildberries.ru; Path=/`,
        ];

        initialCookies.forEach((cookie) => {
            try {
                this.axiosWithCookies.defaults.jar.setCookieSync(cookie, baseUrl);
            } catch (error) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookie:', cookie.substring(0, 50));
            }
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
     */
    async startMonitoring(bot) {
        try {
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...');

            const activeSubscriptions = await userCategorySubscriptionModel.findAllActive();
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions.length}`);

            if (activeSubscriptions.length === 0) {
                console.log('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
                return;
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categoriesMap = this.groupSubscriptionsByCategory(activeSubscriptions);
            console.log(`üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${categoriesMap.size}`);

            // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            for (const [categoryId, subscriptions] of categoriesMap) {
                try {
                    await this.scanAndProcessCategory(categoryId, subscriptions, bot);
                    await this.delay(1000);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error.message);
                }
            }

            console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        }
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    groupSubscriptionsByCategory(subscriptions) {
        const categories = new Map();
        for (const subscription of subscriptions) {
            const categoryId = subscription.category_id;
            if (!categories.has(categoryId)) {
                categories.set(categoryId, []);
            }
            categories.get(categoryId).push(subscription);
        }
        return categories;
    }

    /**
     * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async scanAndProcessCategory(categoryId, subscriptions, bot) {
        if (this.currentlyScanning.has(categoryId)) {
            console.log(`‚è≠Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} —É–∂–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }

        try {
            this.currentlyScanning.add(categoryId);

            const category = await wbCategoryModel.findById(categoryId);
            if (!category) {
                console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            console.log(`\nüîç –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category.name} (ID: ${categoryId})`);
            console.log(`üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriptions.length}`);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const scanPages = Math.max(...subscriptions.map((s) => s.scan_pages || 10));

            // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
            const products = await this.scanCategoryProducts(category, scanPages);
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

            if (products.length === 0) {
                console.log(`‚ÑπÔ∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤`);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            for (const product of products) {
                await this.processProduct(product, subscriptions, category, bot);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            for (const subscription of subscriptions) {
                await userCategorySubscriptionModel.updateLastScan(subscription.id);
            }
        } finally {
            this.currentlyScanning.delete(categoryId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    async processProduct(product, subscriptions, category, bot) {
        try {
            if (!product.nm_id || !product.current_price || product.current_price === 0) {
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
            await productModel.upsert(product);

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É
            const lastPriceRecord = priceHistoryModel.getLastPrice(product.nm_id);
            const lastPrice = lastPriceRecord ? lastPriceRecord.price : null;

            // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (lastPrice === null || product.current_price !== lastPrice) {
                console.log(`üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${product.nm_id} ${lastPrice || '–Ω–æ–≤—ã–π'} ‚Üí ${product.current_price}`);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                await priceHistoryModel.create(product.nm_id, product.current_price);

                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –≤–∏–¥–∏–º —Ç–æ–≤–∞—Ä (–±—ã–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞)
                if (lastPrice !== null) {
                    console.log('üöÄ ~ file: priceMonitoringService.js:202 ~ lastPrice:', lastPrice);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await this.checkAndSendNotifications(product, lastPrice, subscriptions, category, bot);
                }
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.nm_id}:`, error.message);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async checkAndSendNotifications(product, oldPrice, subscriptions, category, bot) {
        const priceChange = this.calculatePriceChange(oldPrice, product.current_price);
        console.log('üöÄ ~ file: priceMonitoringService.js:217 ~ priceChange:', priceChange);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
        const lastTwoPrices = priceHistoryModel.getLastTwoPrices(product.nm_id);
        const [currentRecord, previousRecord] = lastTwoPrices || [];

        const oldTime = previousRecord ? previousRecord.timestamp : new Date();
        console.log('üöÄ ~ file: priceMonitoringService.js:216 ~ oldTime:', oldTime);
        const newTime = currentRecord ? currentRecord.timestamp : new Date();
        console.log('üöÄ ~ file: priceMonitoringService.js:218 ~ newTime:', newTime);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≥–¥–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥
        const subscriptionsToNotify = subscriptions.filter(
            (subscription) => priceChange <= subscription.alert_threshold
        );
        console.log('üöÄ ~ file: priceMonitoringService.js:222 ~ subscriptionsToNotify:', subscriptionsToNotify);

        if (subscriptionsToNotify.length === 0) {
            return;
        }

        console.log(`üì® –ù–∞–π–¥–µ–Ω–æ ${subscriptionsToNotify.length} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ ${product.nm_id}`);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        const messages = subscriptionsToNotify.map((subscription) => {
            const alert = {
                user_id: subscription.user_id,
                product_id: product.nm_id,
                product_name: product.name,
                brand: product.brand,
                image_url: product.image_url, // –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                old_price: oldPrice,
                new_price: product.current_price,
                old_time: oldTime,
                new_time: newTime,
                percent_change: priceChange,
                threshold: subscription.alert_threshold,
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
            this.saveAlertToDatabase(alert);

            const message = this.formatAlertMessage(alert, category.name);

            return {
                bot: bot,
                chatId: subscription.user_id,
                text: message,
                image_url: product.image_url, // –ü–µ—Ä–µ–¥–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                alertData: alert,
            };
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        telegramNotificationService.addMultipleToQueue(messages);
    }

    /**
     * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async scanCategoryProducts(category, pagesToScan = 10) {
        const allProducts = [];
        const actualPages = Math.min(pagesToScan, this.maxPages);

        for (let page = 1; page <= actualPages; page++) {
            try {
                console.log(`üìÑ –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${actualPages}`);

                const products = await this.fetchCategoryPage(category, page);

                if (!products || products.length === 0) {
                    console.log(`‚ÑπÔ∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`);
                    break;
                }

                console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                allProducts.push(...products);

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                if (page < actualPages) {
                    await this.delay(this.scanDelay);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
                break;
            }
        }

        return allProducts;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async fetchCategoryPage(category, page = 1) {
        try {
            const query = this.buildCategoryQuery(category);
            console.log(`üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω query: ${query}`);

            const url = 'https://u-search.wb.ru/exactmatch/ru/common/v18/search';
            const params = {
                ab_testid: 'popular_sort',
                ab_testing: 'false',
                appType: 1,
                curr: 'rub',
                dest: -1257786,
                inheritFilters: 'false',
                lang: 'ru',
                page: page,
                query: query,
                resultset: 'catalog',
                sort: 'popular',
                spp: 30,
                suppressSpellcheck: 'false',
            };

            const timestamp = Math.floor(Date.now() / 1000);
            const queryId = `qid${timestamp}${Math.random().toString().substring(2, 12)}`;

            const response = await this.axiosWithCookies.get(url, {
                params: params,
                timeout: 20000,
                withCredentials: true,
                headers: {
                    'User-Agent':
                        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 YaBrowser/25.8.0.0 Safari/537.36',
                    Accept: '*/*',
                    'Accept-Language': 'ru,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    Referer: `https://www.wildberries.ru/catalog/elektronika/smart-chasy?sort=popular&page=${page}`,
                    Origin: 'https://www.wildberries.ru',
                    'Sec-Fetch-Dest': 'empty',
                    'Sec-Fetch-Mode': 'cors',
                    'Sec-Fetch-Site': 'cross-site',
                    Priority: 'u=1, i',
                    'x-queryid': queryId,
                    'x-userid': '0',
                },
            });

            let products = [];
            if (response.data?.data?.products) {
                products = response.data.data.products;
            } else if (response.data?.products) {
                products = response.data.products;
            } else if (Array.isArray(response.data)) {
                products = response.data;
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
            return products.map((product) => this.normalizeProductData(product, category.id));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
            return [];
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    buildCategoryQuery(category) {
        if (category.search_query) {
            console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º search_query –∏–∑ –±–∞–∑—ã: ${category.search_query}`);
            return category.search_query;
        }

        if (category.query && category.query.includes('menu_redirect_subject_v2')) {
            console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º query –∏–∑ –±–∞–∑—ã: ${category.query}`);
            return category.query;
        }

        console.log(`üéØ –§–æ—Ä–º–∏—Ä—É–µ–º query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: menu_redirect_subject_v2_${category.id} ${category.name}`);
        return `menu_redirect_subject_v2_${category.id} ${category.name}`;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
     */
    normalizeProductData(productData, categoryId) {
        let priceU = 0;

        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ sizes[0].price.product
        if (productData.sizes && productData.sizes.length > 0) {
            const firstSize = productData.sizes[0];
            if (firstSize.price?.product && firstSize.price.product > 0) {
                priceU = firstSize.price.product;
            } else if (firstSize.price?.basic && firstSize.price.basic > 0) {
                priceU = firstSize.price.basic;
            }
        }
        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
        else if (productData.salePriceU && productData.salePriceU > 0) {
            priceU = productData.salePriceU;
        } else if (productData.priceU && productData.priceU > 0) {
            priceU = productData.priceU;
        }

        const priceInRubles = priceU ? Math.round(priceU / 100) : 0;

        if (priceInRubles === 0) {
            console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –¶–ï–ù–ê –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${productData.name}`);
        }

        return {
            nm_id: productData.id,
            name: productData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            brand: productData.brand || '',
            brandId: productData.brandId || 0,
            category_id: categoryId,
            current_price: priceInRubles,
            rating: productData.rating || productData.reviewRating || 0,
            feedbacks_count: productData.feedbacks || productData.feedbackCount || 0,
            image_url: this.getProductImageUrl(productData.id),
            supplier: productData.supplier || '',
            supplier_id: productData.supplierId || 0,
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    getProductImageUrl(productId) {
        if (!productId) return '';

        try {
            const nm = parseInt(productId, 10);
            const vol = ~~(nm / 1e5);
            const part = ~~(nm / 1e3);

            let host = '01';
            if (vol >= 0 && vol <= 143) host = '01';
            else if (vol >= 144 && vol <= 287) host = '02';
            else if (vol >= 288 && vol <= 431) host = '03';
            else if (vol >= 432 && vol <= 719) host = '04';
            else if (vol >= 720 && vol <= 1007) host = '05';
            else if (vol >= 1008 && vol <= 1061) host = '06';
            else if (vol >= 1062 && vol <= 1115) host = '07';
            else if (vol >= 1116 && vol <= 1169) host = '08';
            else if (vol >= 1170 && vol <= 1313) host = '09';
            else if (vol >= 1314 && vol <= 1601) host = '10';
            else if (vol >= 1602 && vol <= 1655) host = '11';
            else if (vol >= 1656 && vol <= 1919) host = '12';
            else if (vol >= 1920 && vol <= 2045) host = '13';
            else if (vol >= 2046 && vol <= 2189) host = '14';
            else if (vol >= 2170 && vol <= 2405) host = '15';
            else if (vol >= 2406 && vol <= 2621) host = '16';
            else if (vol >= 2622 && vol <= 2837) host = '17';
            else host = '18';

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (big/1.jpg)
            return `https://basket-${host}.wbbasket.ru/vol${vol}/part${part}/${nm}/images/big/1.jpg`;
        } catch (error) {
            console.log('üöÄ ~ file: priceMonitoringService.js:465 ~ error:', error);
            return '';
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    calculatePriceChange(oldPrice, newPrice) {
        if (!oldPrice || oldPrice === 0) return 0;
        const change = ((newPrice - oldPrice) / oldPrice) * 100;
        return Math.round(change * 100) / 100;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    formatAlertMessage(alert, categoryName) {
        const changeIcon = alert.percent_change > 0 ? 'üìà' : 'üìâ';
        const changeType = alert.percent_change > 0 ? '–ø–æ–¥–æ—Ä–æ–∂–∞–ª' : '–ø–æ–¥–µ—à–µ–≤–µ–ª';
        const changeColor = alert.percent_change > 0 ? 'üî¥' : 'üü¢';
        const productUrl = `https://www.wildberries.ru/catalog/${alert.product_id}/detail.aspx`;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ SQLite
        const parseDbTime = (timeString) => {
            // SQLite —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –≤ UTC —Ñ–æ—Ä–º–∞—Ç–µ: "2025-10-12 19:24:00"
            // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –∫–∞–∫ UTC, –ø–æ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–æ—Å–∫–≤—É
            return dayjs.utc(timeString, 'YYYY-MM-DD HH:mm:ss').tz('Europe/Moscow');
        };

        const oldTimeFormatted = parseDbTime(alert.old_time).format('DD.MM.YYYY HH:mm');
        const newTimeFormatted = parseDbTime(alert.new_time).format('DD.MM.YYYY HH:mm');
        const currentTimeFormatted = dayjs().tz('Europe/Moscow').format('DD.MM.YYYY HH:mm');

        return `
${changeColor} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>


üì¶ <b>${alert.product_name}</b>
üè∑Ô∏è –ë—Ä–µ–Ω–¥: ${alert.brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}

üí∞ <b>–¶–µ–Ω–∞:</b> ${alert.old_price} —Ä—É–±. (${oldTimeFormatted}) ‚Üí ${alert.new_price} —Ä—É–±. (${newTimeFormatted})
${changeIcon} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> ${Math.abs(alert.percent_change)}% ${changeType}

‚ö° <b>–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${alert.threshold}%

üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: ${productUrl}

üïí ${currentTimeFormatted}
    `.trim();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
     */
    saveAlertToDatabase(alert) {
        const db = getDB();
        try {
            db.prepare(
                `
                INSERT INTO price_alerts 
                (user_id, product_id, old_price, new_price, percent_change, threshold, created_at)
                VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            `
            ).run(
                alert.user_id,
                alert.product_id,
                alert.old_price,
                alert.new_price,
                alert.percent_change,
                alert.threshold
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
        }
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    delay(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const priceMonitoringService = new PriceMonitoringService();

/**
 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export function startPeriodicMonitoring(bot) {
    const INTERVAL_MINUTES = 10;
    const intervalMs = INTERVAL_MINUTES * 60 * 1000;

    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ ${INTERVAL_MINUTES} –º–∏–Ω—É—Ç)`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    priceMonitoringService.startMonitoring(bot).catch(console.error);

    // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    setInterval(() => {
        console.log(`\nüîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...`);
        priceMonitoringService.startMonitoring(bot).catch(console.error);
    }, intervalMs);
}
