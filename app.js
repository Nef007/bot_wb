import { Bot, session } from 'grammy';
import { conversations, createConversation } from '@grammyjs/conversations';
import { FileAdapter } from '@grammyjs/storage-file'; // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

import 'dotenv/config';
import { userController } from './controllers/userController.js';
import mainRouter from './composer/index.js';
import { YooMoneyService } from './services/yoomoneyService.js';
import userModel from './db/models/user.js';
import { wbCategoryModel } from './db/models/wbCategory.js'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
import { TelegramNotificationService } from './services/telegramNotificationService.js';
import { notificationManager } from './services/notificationManager.js';
import { monitoringOrchestrator } from './services/monitoringOrchestrator.js';

const yooMoneyService = new YooMoneyService();

// dayjs.extend(utc);
// dayjs.extend(timezone);
// dayjs.tz.setDefault('Europe/Moscow');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FileAdapter)
const storage = new FileAdapter({
    dirName: 'sessions',
});

async function start() {
    const bot = new Bot(process.env.tokenTelegram);

    // Set commands
    await bot.api.setMyCommands([
        { command: 'start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫' },
        { command: 'main_menu', description: '–ú–µ–Ω—é' },
    ]);

    // Middleware
    bot.use(session({ initial: () => ({}), storage }));
    bot.use(conversations());

    mainRouter.forEach((createComposerFunc) => bot.use(createComposerFunc())); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ mainRouter

    bot.command('start', userController.add);

    bot.catch((error) => {
        console.error('Global error handler:', error);

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
        if (error.description && error.description.includes('query is too old')) {
            console.log('Ignoring expired callback query error');
            return;
        }

        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ unhandled rejections
    process.on('unhandledRejection', (reason, promise) => {
        console.error('Unhandled Rejection at:', promise, 'reason:', reason);
    });

    process.on('uncaughtException', (error) => {
        console.error('Uncaught Exception:', error);
        // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ PM2 –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
    process.on('SIGINT', async () => {
        console.log('üõë Received SIGINT, shutting down gracefully...');
        monitoringOrchestrator.startAllMonitoring();
        process.exit(0);
    });

    process.on('SIGTERM', async () => {
        console.log('üõë Received SIGTERM, shutting down gracefully...');
        monitoringOrchestrator.startAllMonitoring();
        process.exit(0);
    });

    bot.start({
        onStart: async ({ username }) => {
            console.log(`[GrammyBot] STARTING: https://t.me/${username}`);

            try {
                await initializeAdmin();

                // 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                const notificationService = new TelegramNotificationService(bot);
                console.log('‚úÖ TelegramNotificationService —Å–æ–∑–¥–∞–Ω');

                // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notificationManager.initialize(notificationService);
                console.log('‚úÖ NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

                // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await syncCategories();

                // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏
                await yooMoneyService.initialize();

                // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                monitoringOrchestrator.startPeriodicMonitoring();
                console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            }
        },
    });

    console.log('[GrammyBot] STARTING');
}
start();

async function initializeAdmin() {
    const adminUserId = process.env.ADMIN_USER_ID;
    if (!adminUserId) {
        console.log('‚ö†Ô∏è ADMIN_USER_ID not set in .env');
        return;
    }

    try {
        let user = userModel.findById(adminUserId);
        if (user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (user.role !== 'ADMIN') {
                userModel.updateRole(adminUserId, 'ADMIN');
                console.log(`‚úÖ Updated user ${adminUserId} to ADMIN role`);
            } else {
                console.log(`‚úÖ User ${adminUserId} is already ADMIN`);
            }
        } else {
            console.log(`‚ö†Ô∏è Admin user ${adminUserId} not found in database`);
            console.log(`‚ÑπÔ∏è User will become admin when they start the bot`);
        }
    } catch (error) {
        console.error('Error initializing admin:', error);
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å Wildberries –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
 * (–≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
 */
async function syncCategories() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å Wildberries...');

        const categoriesCount = await wbCategoryModel.safeSyncWithWB();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categoriesCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        console.log('‚ö†Ô∏è –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ
        const hasCategories = await wbCategoryModel.hasCategories();
        if (hasCategories) {
            console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã');
        } else {
            console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ');
        }
    }
}
