import { getDB } from '../connection.js';
import { wbCategoryService } from '../../services/wbCategoryService.js';

const db = getDB();

export const wbCategoryModel = {
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å Wildberries
     */
    async syncWithWB() {
        try {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å Wildberries...');
            const categories = await wbCategoryService.fetchCategories();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            const activeCategoriesBeforeSync = db
                .prepare('SELECT id, is_active FROM wb_categories WHERE is_active = 1')
                .all();
            console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${activeCategoriesBeforeSync.length}`);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ UPDATE –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const insertStmt = db.prepare(`
            INSERT OR IGNORE INTO wb_categories 
            (id, name, full_name, url, query, shard, dest, parent_id, catalog_type, has_children, search_query, is_active, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1, CURRENT_TIMESTAMP)
        `);

            const updateStmt = db.prepare(`
            UPDATE wb_categories 
            SET name = ?, full_name = ?, url = ?, query = ?, shard = ?, dest = ?, 
                parent_id = ?, catalog_type = ?, has_children = ?, search_query = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        `);

            const transaction = db.transaction((categories) => {
                for (const category of categories) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    const insertResult = insertStmt.run(
                        category.id,
                        category.name,
                        category.full_name,
                        category.url,
                        category.query,
                        category.shard,
                        JSON.stringify(category.dest),
                        category.parent_id,
                        category.catalog_type,
                        category.has_children ? 1 : 0,
                        category.searchQuery || null // –î–æ–±–∞–≤–ª—è–µ–º search_query
                    );

                    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ –≤—Å—Ç–∞–≤–∏–ª–∞—Å—å), –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
                    if (insertResult.changes === 0) {
                        updateStmt.run(
                            category.name,
                            category.full_name,
                            category.url,
                            category.query,
                            category.shard,
                            JSON.stringify(category.dest),
                            category.parent_id,
                            category.catalog_type,
                            category.has_children ? 1 : 0,
                            category.searchQuery || null, // –û–±–Ω–æ–≤–ª—è–µ–º search_query
                            category.id
                        );
                    }
                }
            });

            transaction(categories);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_active –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const restoreStmt = db.prepare(`
            UPDATE wb_categories 
            SET is_active = 1 
            WHERE id IN (${activeCategoriesBeforeSync.map((cat) => '?').join(',')})
        `);

            if (activeCategoriesBeforeSync.length > 0) {
                restoreStmt.run(activeCategoriesBeforeSync.map((cat) => cat.id));
            }

            console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
            console.log(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${activeCategoriesBeforeSync.length}`);

            // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å search_query –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const categoriesWithSearchQuery = db
                .prepare('SELECT id, name, search_query FROM wb_categories WHERE search_query IS NOT NULL LIMIT 10')
                .all();
            console.log(`üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å search_query (–ø–µ—Ä–≤—ã–µ 10):`);
            categoriesWithSearchQuery.forEach((cat) => {
                console.log(`   ${cat.id}: ${cat.name} -> ${cat.search_query}`);
            });

            return categories.length;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            throw error;
        }
    },

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç
     */
    async safeSyncWithWB() {
        try {
            const hasCategories = await this.hasCategories();

            if (!hasCategories) {
                console.log('üì≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
                return await this.syncWithWB();
            } else {
                console.log('üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
                const count = db.prepare('SELECT COUNT(*) as count FROM wb_categories').get().count;
                return count;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ parent_id
     */
    findByParentId(parentId) {
        const db = getDB();
        if (parentId === null) {
            return db
                .prepare(
                    `
                SELECT * FROM wb_categories 
                WHERE parent_id IS NULL AND is_active = 1 
                ORDER BY name
            `
                )
                .all();
        } else {
            return db
                .prepare(
                    `
                SELECT * FROM wb_categories 
                WHERE parent_id = ? AND is_active = 1 
                ORDER BY name
            `
                )
                .all(parentId);
        }
    },

    /**
     * –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
     */
    findById(id) {
        const db = getDB();
        return db.prepare('SELECT * FROM wb_categories WHERE id = ?').get(id);
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    findAll() {
        const db = getDB();
        return db
            .prepare(
                `
            SELECT * FROM wb_categories 
            WHERE is_active = 1 
            ORDER BY full_name
        `
            )
            .all();
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ
     */
    hasCategories() {
        const db = getDB();
        const result = db.prepare('SELECT COUNT(*) as count FROM wb_categories').get();
        return result.count > 0;
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    getActiveCategoriesCount() {
        const db = getDB();
        const result = db.prepare('SELECT COUNT(*) as count FROM wb_categories WHERE is_active = 1').get();
        return result.count;
    },

    createSystemCategory() {
        const db = getDB();
        try {
            const result = db
                .prepare(
                    `
                INSERT OR IGNORE INTO wb_categories 
                (id, name, full_name, catalog_type, is_active, has_children)
                VALUES (0, '–û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', '–û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', 'system', 1, 0)
            `
                )
                .run();

            if (result.changes > 0) {
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        }
    },
};
